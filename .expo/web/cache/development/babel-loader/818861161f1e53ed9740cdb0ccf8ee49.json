{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/katherinemartinez/src/designSystem/src/library/primitives/Icon/Icon.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { useSpacing, useForeground } from '@designSystem/hooks';\nimport { glyphMap } from \"./glyphMap\";\nvar FONT_FAMILY = 'CoinbaseIcons';\nvar FONT_FILE = '../assets/fonts/CoinbaseIcons.ttf';\nexport var Icon = function Icon(_ref) {\n  var name = _ref.name,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 32 : _ref$size,\n      _ref$spacing = _ref.spacing,\n      spacing = _ref$spacing === void 0 ? undefined : _ref$spacing,\n      _ref$surface = _ref.surface,\n      surface = _ref$surface === void 0 ? 'background' : _ref$surface,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'primary' : _ref$color;\n  var space = useSpacing(spacing);\n  var iconColor = useForeground(surface, color);\n  return React.createElement(Text, {\n    style: _objectSpread({}, space, {\n      fontSize: size,\n      color: iconColor,\n      fontFamily: fontReference\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, glyphMap[name]);\n};\nvar fontBasename = FONT_FILE ? FONT_FILE.replace('.ttf', '') : FONT_FAMILY;\nvar fontReference = Platform.select({\n  android: fontBasename,\n  web: fontBasename,\n  default: FONT_FAMILY\n});","map":{"version":3,"sources":["/Users/katherinemartinez/src/designSystem/src/library/primitives/Icon/Icon.tsx"],"names":["React","useSpacing","useForeground","glyphMap","FONT_FAMILY","FONT_FILE","Icon","name","size","spacing","undefined","surface","color","space","iconColor","fontSize","fontFamily","fontReference","fontBasename","replace","Platform","select","android","web","default"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,qBAA1C;AAGA,SAASC,QAAT;AACA,IAAMC,WAAW,GAAG,eAApB;AACA,IAAMC,SAAS,GAAG,mCAAlB;AAgBA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,OASG;AAAA,MALrBC,IAKqB,QALrBA,IAKqB;AAAA,uBAJrBC,IAIqB;AAAA,MAJrBA,IAIqB,0BAJd,EAIc;AAAA,0BAHrBC,OAGqB;AAAA,MAHrBA,OAGqB,6BAHXC,SAGW;AAAA,0BAFrBC,OAEqB;AAAA,MAFrBA,OAEqB,6BAFX,YAEW;AAAA,wBADrBC,KACqB;AAAA,MADrBA,KACqB,2BADb,SACa;AACrB,MAAMC,KAAK,GAAGZ,UAAU,CAACQ,OAAD,CAAxB;AACA,MAAMK,SAAS,GAAGZ,aAAa,CAACS,OAAD,EAAUC,KAAV,CAA/B;AAEA,SACE,oBAAC,IAAD;AACE,IAAA,KAAK,oBACAC,KADA;AAEHE,MAAAA,QAAQ,EAAEP,IAFP;AAGHI,MAAAA,KAAK,EAAEE,SAHJ;AAIHE,MAAAA,UAAU,EAAEC;AAJT,MADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGd,QAAQ,CAACI,IAAD,CARX,CADF;AAYD,CAzBM;AA4BP,IAAMW,YAAY,GAAGb,SAAS,GAAGA,SAAS,CAACc,OAAV,CAAkB,MAAlB,EAA0B,EAA1B,CAAH,GAAmCf,WAAjE;AAEA,IAAMa,aAAa,GAAGG,QAAQ,CAACC,MAAT,CAAgB;AACpCC,EAAAA,OAAO,EAAEJ,YAD2B;AAEpCK,EAAAA,GAAG,EAAEL,YAF+B;AAGpCM,EAAAA,OAAO,EAAEpB;AAH2B,CAAhB,CAAtB","sourcesContent":["import React from 'react';\nimport { Platform, Text } from 'react-native';\nimport { useSpacing, useForeground } from '@designSystem/hooks';\nimport { SurfaceColorMap, Spacing } from '@designSystem/types';\n\nimport { glyphMap } from './glyphMap';\nconst FONT_FAMILY = 'CoinbaseIcons';\nconst FONT_FILE = '../assets/fonts/CoinbaseIcons.ttf';\n\ntype IconName = keyof typeof glyphMap;\ntype IconProps<\n  T extends keyof SurfaceColorMap = keyof SurfaceColorMap,\n  C extends SurfaceColorMap[T] = SurfaceColorMap[T]\n> = {\n  name: IconName;\n  size?: number;\n  spacing?: Spacing;\n  surface?: T;\n  color?: C;\n};\n\n// Heavily inspired by createIconSet in react-native-vector-icons\n// https://github.com/oblador/react-native-vector-icons/blob/master/lib/create-icon-set.js\nexport const Icon = <\n  T extends keyof SurfaceColorMap,\n  C extends SurfaceColorMap[T]\n>({\n  name,\n  size = 32,\n  spacing = undefined,\n  surface = 'background' as T,\n  color = 'primary' as C,\n}: IconProps<T, C>) => {\n  const space = useSpacing(spacing);\n  const iconColor = useForeground(surface, color);\n\n  return (\n    <Text\n      style={{\n        ...space,\n        fontSize: size,\n        color: iconColor,\n        fontFamily: fontReference,\n      }}\n    >\n      {glyphMap[name]}\n    </Text>\n  );\n};\n\n// Android doesn't care about actual fontFamily name, it will only look in fonts folder.\nconst fontBasename = FONT_FILE ? FONT_FILE.replace('.ttf', '') : FONT_FAMILY;\n\nconst fontReference = Platform.select({\n  android: fontBasename,\n  web: fontBasename,\n  default: FONT_FAMILY,\n});\n"]},"metadata":{},"sourceType":"module"}