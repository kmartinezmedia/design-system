{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/katherinemartinez/src/designSystem/src/library/primitives/typography/Text.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport RNText from \"react-native-web/dist/exports/Text\";\nimport { debounce } from '@designSystem/utils';\nimport { useSpacing, useForeground } from '@designSystem/hooks';\nexport var Text = function Text(_ref) {\n  var _ref$surface = _ref.surface,\n      surface = _ref$surface === void 0 ? 'background' : _ref$surface,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'default' : _ref$color,\n      children = _ref.children,\n      align = _ref.align,\n      ellipsize = _ref.ellipsize,\n      style = _ref.style,\n      onPress = _ref.onPress,\n      spacing = _ref.spacing,\n      lineHeight = _ref.lineHeight,\n      dangerouslySetStyle = _ref.dangerouslySetStyle,\n      textProps = _objectWithoutProperties(_ref, [\"surface\", \"color\", \"children\", \"align\", \"ellipsize\", \"style\", \"onPress\", \"spacing\", \"lineHeight\", \"dangerouslySetStyle\"]);\n\n  var space = useSpacing(spacing);\n  var textColor = useForeground(surface, color);\n  var computedLineHeight = lineHeight === undefined ? style == null ? void 0 : style.lineHeight : lineHeight;\n\n  var ellipsizeProps = ellipsize && function () {\n    return {\n      numberOfLines: textProps.numberOfLines || 1,\n      ellipsizeMode: ellipsize\n    };\n  }();\n\n  return React.createElement(RNText, _extends({\n    onPress: onPress && debounce(onPress),\n    style: [_objectSpread({}, style), {\n      color: textColor,\n      textAlign: align,\n      lineHeight: computedLineHeight === 'none' ? undefined : computedLineHeight\n    }, _objectSpread({}, space), _objectSpread({}, dangerouslySetStyle), ellipsize ? {\n      overflow: 'hidden'\n    } : {}]\n  }, ellipsizeProps, textProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }), children);\n};","map":{"version":3,"sources":["/Users/katherinemartinez/src/designSystem/src/library/primitives/typography/Text.tsx"],"names":["React","debounce","useSpacing","useForeground","Text","surface","color","children","align","ellipsize","style","onPress","spacing","lineHeight","dangerouslySetStyle","textProps","space","textColor","computedLineHeight","undefined","ellipsizeProps","numberOfLines","ellipsizeMode","textAlign","overflow"],"mappings":";;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAOA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,qBAA1C;AAgBA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAe4B;AAAA,0BAX9CC,OAW8C;AAAA,MAX9CA,OAW8C,6BAXpC,YAWoC;AAAA,wBAV9CC,KAU8C;AAAA,MAV9CA,KAU8C,2BAVtC,SAUsC;AAAA,MAT9CC,QAS8C,QAT9CA,QAS8C;AAAA,MAR9CC,KAQ8C,QAR9CA,KAQ8C;AAAA,MAP9CC,SAO8C,QAP9CA,SAO8C;AAAA,MAN9CC,KAM8C,QAN9CA,KAM8C;AAAA,MAL9CC,OAK8C,QAL9CA,OAK8C;AAAA,MAJ9CC,OAI8C,QAJ9CA,OAI8C;AAAA,MAH9CC,UAG8C,QAH9CA,UAG8C;AAAA,MAF9CC,mBAE8C,QAF9CA,mBAE8C;AAAA,MAD3CC,SAC2C;;AAC9C,MAAMC,KAAK,GAAGd,UAAU,CAACU,OAAD,CAAxB;AACA,MAAMK,SAAS,GAAGd,aAAa,CAACE,OAAD,EAAUC,KAAV,CAA/B;AAEA,MAAMY,kBAAkB,GACtBL,UAAU,KAAKM,SAAf,GAA2BT,KAA3B,oBAA2BA,KAAK,CAAEG,UAAlC,GAA+CA,UADjD;;AAGA,MAAMO,cAAc,GAClBX,SAAS,IACR,YAAM;AACL,WAAO;AACLY,MAAAA,aAAa,EAAEN,SAAS,CAACM,aAAV,IAA2B,CADrC;AAELC,MAAAA,aAAa,EAAEb;AAFV,KAAP;AAID,GALD,EAFF;;AASA,SACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEE,OAAO,IAAIV,QAAQ,CAACU,OAAD,CAD9B;AAEE,IAAA,KAAK,EAAE,mBACAD,KADA,GAEL;AACEJ,MAAAA,KAAK,EAAEW,SADT;AAEEM,MAAAA,SAAS,EAAEf,KAFb;AAGEK,MAAAA,UAAU,EACRK,kBAAkB,KAAK,MAAvB,GAAgCC,SAAhC,GAA4CD;AAJhD,KAFK,oBAQAF,KARA,qBASAF,mBATA,GAULL,SAAS,GAAG;AAAEe,MAAAA,QAAQ,EAAE;AAAZ,KAAH,GAA4B,EAVhC;AAFT,KAcMJ,cAdN,EAeML,SAfN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAiBGR,QAjBH,CADF;AAqBD,CApDM","sourcesContent":["// @CB Text Base Component - should not be imported outside of design system\nimport React from 'react';\nimport {\n  Text as RNText,\n  TextStyle,\n  TextProps as RNTextProps,\n} from 'react-native';\nimport { SurfaceColorMap, Spacing } from '@designSystem/types';\nimport { debounce } from '@designSystem/utils';\nimport { useSpacing, useForeground } from '@designSystem/hooks';\n\nexport interface TextProps<\n  T extends keyof SurfaceColorMap = keyof SurfaceColorMap,\n  C extends SurfaceColorMap[T] = SurfaceColorMap[T]\n> extends RNTextProps {\n  align?: TextStyle['textAlign'];\n  ellipsize?: RNTextProps['ellipsizeMode'];\n  style?: TextStyle;\n  spacing?: Spacing;\n  lineHeight?: number | 'none';\n  dangerouslySetStyle?: TextStyle;\n  surface?: T;\n  color?: C;\n}\n\nexport const Text = <\n  T extends keyof SurfaceColorMap,\n  C extends SurfaceColorMap[T]\n>({\n  surface = 'background' as T,\n  color = 'default' as C,\n  children,\n  align,\n  ellipsize,\n  style,\n  onPress,\n  spacing,\n  lineHeight,\n  dangerouslySetStyle,\n  ...textProps\n}: React.PropsWithChildren<TextProps<T, C>>) => {\n  const space = useSpacing(spacing);\n  const textColor = useForeground(surface, color);\n\n  const computedLineHeight =\n    lineHeight === undefined ? style?.lineHeight : lineHeight;\n\n  const ellipsizeProps =\n    ellipsize &&\n    (() => {\n      return {\n        numberOfLines: textProps.numberOfLines || 1,\n        ellipsizeMode: ellipsize,\n      };\n    })();\n\n  return (\n    <RNText\n      onPress={onPress && debounce(onPress)}\n      style={[\n        { ...style },\n        {\n          color: textColor,\n          textAlign: align,\n          lineHeight:\n            computedLineHeight === 'none' ? undefined : computedLineHeight,\n        },\n        { ...space },\n        { ...dangerouslySetStyle },\n        ellipsize ? { overflow: 'hidden' } : {},\n      ]}\n      {...ellipsizeProps}\n      {...textProps}\n    >\n      {children}\n    </RNText>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}