{"ast":null,"code":"import { spacing as spacingConstants } from '@designSystem/theme';\nimport { isPlainObject, capitalize } from 'lodash';\nexport var useSpacing = function useSpacing(spacing) {\n  var styles = {};\n\n  if (!spacing) {\n    return styles;\n  }\n\n  var setSpacing = function setSpacing(direction, value) {\n    var variant = /-/.test(value.toString()) || value < 0 ? 'margin' : 'padding';\n    var propName = \"\" + variant + capitalize(direction);\n    var spacingKey = typeof value === 'number' && Number.isInteger(value) ? Math.abs(value) : value.toString().replace(/-/, '');\n    var spacingValue = spacingConstants[spacingKey];\n    var offset = (variant === 'margin' ? -1 : 1) * spacingValue;\n    styles[propName] = offset;\n  };\n\n  if (isPlainObject(spacing)) {\n    Object.keys(spacing).forEach(function (direction) {\n      return setSpacing(direction, spacing[direction]);\n    });\n  } else if (Array.isArray(spacing)) {\n    switch (spacing.length) {\n      case 4:\n        setSpacing('top', spacing[0]);\n        setSpacing('right', spacing[1]);\n        setSpacing('bottom', spacing[2]);\n        setSpacing('left', spacing[3]);\n        break;\n\n      case 3:\n        setSpacing('top', spacing[0]);\n        setSpacing('horizontal', spacing[1]);\n        setSpacing('bottom', spacing[2]);\n        break;\n\n      case 2:\n        setSpacing('vertical', spacing[0]);\n        setSpacing('horizontal', spacing[1]);\n        break;\n\n      case 1:\n        setSpacing('', spacing[0]);\n        break;\n    }\n  } else {\n    setSpacing('', spacing);\n  }\n\n  return styles;\n};","map":{"version":3,"sources":["/Users/katherinemartinez/src/designSystem/src/library/hooks/useSpacing.ts"],"names":["spacing","spacingConstants","isPlainObject","capitalize","useSpacing","styles","setSpacing","direction","value","variant","test","toString","propName","spacingKey","Number","isInteger","Math","abs","replace","spacingValue","offset","Object","keys","forEach","Array","isArray","length"],"mappings":"AACA,SAASA,OAAO,IAAIC,gBAApB,QAA4C,qBAA5C;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,QAA1C;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CACxBJ,OADwB,EAKrB;AACH,MAAMK,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACL,OAAL,EAAc;AACZ,WAAOK,MAAP;AACD;;AAED,MAAMC,UAAU,GAAG,SAAbA,UAAa,CACjBC,SADiB,EAEjBC,KAFiB,EAGd;AACH,QAAMC,OAAO,GACX,IAAIC,IAAJ,CAASF,KAAK,CAACG,QAAN,EAAT,KAA8BH,KAAK,GAAG,CAAtC,GAA0C,QAA1C,GAAqD,SADvD;AAEA,QAAMI,QAAQ,QAAMH,OAAN,GAAgBN,UAAU,CAACI,SAAD,CAAxC;AAEA,QAAMM,UAAU,GACd,OAAOL,KAAP,KAAiB,QAAjB,IAA6BM,MAAM,CAACC,SAAP,CAAiBP,KAAjB,CAA7B,GACIQ,IAAI,CAACC,GAAL,CAAST,KAAT,CADJ,GAEIA,KAAK,CAACG,QAAN,GAAiBO,OAAjB,CAAyB,GAAzB,EAA8B,EAA9B,CAHN;AAKA,QAAMC,YAAY,GAAIlB,gBAAD,CAA0BY,UAA1B,CAArB;AACA,QAAMO,MAAM,GAAG,CAACX,OAAO,KAAK,QAAZ,GAAuB,CAAC,CAAxB,GAA4B,CAA7B,IAAkCU,YAAjD;AAECd,IAAAA,MAAD,CAAgBO,QAAhB,IAA4BQ,MAA5B;AACD,GAjBD;;AAmBA,MAAIlB,aAAa,CAACF,OAAD,CAAjB,EAA4B;AAC1BqB,IAAAA,MAAM,CAACC,IAAP,CAAYtB,OAAZ,EAAqBuB,OAArB,CAA6B,UAAChB,SAAD;AAAA,aAC3BD,UAAU,CACRC,SADQ,EAEPP,OAAD,CACEO,SADF,CAFQ,CADiB;AAAA,KAA7B;AAQD,GATD,MASO,IAAIiB,KAAK,CAACC,OAAN,CAAczB,OAAd,CAAJ,EAA4B;AACjC,YAAQA,OAAO,CAAC0B,MAAhB;AACE,WAAK,CAAL;AACEpB,QAAAA,UAAU,CAAC,KAAD,EAAQN,OAAO,CAAC,CAAD,CAAf,CAAV;AACAM,QAAAA,UAAU,CAAC,OAAD,EAAUN,OAAO,CAAC,CAAD,CAAjB,CAAV;AACAM,QAAAA,UAAU,CAAC,QAAD,EAAWN,OAAO,CAAC,CAAD,CAAlB,CAAV;AACAM,QAAAA,UAAU,CAAC,MAAD,EAASN,OAAO,CAAC,CAAD,CAAhB,CAAV;AACA;;AACF,WAAK,CAAL;AACEM,QAAAA,UAAU,CAAC,KAAD,EAAQN,OAAO,CAAC,CAAD,CAAf,CAAV;AACAM,QAAAA,UAAU,CAAC,YAAD,EAAeN,OAAO,CAAC,CAAD,CAAtB,CAAV;AACAM,QAAAA,UAAU,CAAC,QAAD,EAAWN,OAAO,CAAC,CAAD,CAAlB,CAAV;AACA;;AACF,WAAK,CAAL;AACEM,QAAAA,UAAU,CAAC,UAAD,EAAaN,OAAO,CAAC,CAAD,CAApB,CAAV;AACAM,QAAAA,UAAU,CAAC,YAAD,EAAeN,OAAO,CAAC,CAAD,CAAtB,CAAV;AACA;;AACF,WAAK,CAAL;AACEM,QAAAA,UAAU,CAAC,EAAD,EAAKN,OAAO,CAAC,CAAD,CAAZ,CAAV;AACA;AAlBJ;AAoBD,GArBM,MAqBA;AACLM,IAAAA,UAAU,CAAC,EAAD,EAAKN,OAAL,CAAV;AACD;;AAED,SAAOK,MAAP;AACD,CAlEM","sourcesContent":["import { SpacingScale, SpacingDirection } from '@designSystem/types';\nimport { spacing as spacingConstants } from '@designSystem/theme';\nimport { isPlainObject, capitalize } from 'lodash';\n\nexport const useSpacing = (\n  spacing?:\n    | { [key in SpacingDirection]?: SpacingScale }\n    | SpacingScale[]\n    | SpacingScale,\n) => {\n  const styles = {};\n\n  if (!spacing) {\n    return styles;\n  }\n\n  const setSpacing = (\n    direction: SpacingDirection | '',\n    value: number | string,\n  ) => {\n    const variant =\n      /-/.test(value.toString()) || value < 0 ? 'margin' : 'padding';\n    const propName = `${variant}${capitalize(direction)}`;\n\n    const spacingKey =\n      typeof value === 'number' && Number.isInteger(value)\n        ? Math.abs(value)\n        : value.toString().replace(/-/, '');\n\n    const spacingValue = (spacingConstants as any)[spacingKey];\n    const offset = (variant === 'margin' ? -1 : 1) * spacingValue;\n\n    (styles as any)[propName] = offset;\n  };\n\n  if (isPlainObject(spacing)) {\n    Object.keys(spacing).forEach((direction: SpacingDirection) =>\n      setSpacing(\n        direction,\n        (spacing as { [key in SpacingDirection]?: SpacingScale })[\n          direction\n        ] as number,\n      ),\n    );\n  } else if (Array.isArray(spacing)) {\n    switch (spacing.length) {\n      case 4:\n        setSpacing('top', spacing[0] as number);\n        setSpacing('right', spacing[1] as number);\n        setSpacing('bottom', spacing[2] as number);\n        setSpacing('left', spacing[3] as number);\n        break;\n      case 3:\n        setSpacing('top', spacing[0] as number);\n        setSpacing('horizontal', spacing[1] as number);\n        setSpacing('bottom', spacing[2] as number);\n        break;\n      case 2:\n        setSpacing('vertical', spacing[0] as number);\n        setSpacing('horizontal', spacing[1] as number);\n        break;\n      case 1:\n        setSpacing('', spacing[0] as number);\n        break;\n    }\n  } else {\n    setSpacing('', spacing as string);\n  }\n\n  return styles;\n};\n"]},"metadata":{},"sourceType":"module"}