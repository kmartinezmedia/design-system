{"ast":null,"code":"import { useTheme } from '@designSystem/theme';\nexport var useBackground = function useBackground(surface, color) {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  if (surface in colors && color in colors[surface]) {\n    return colors[surface][color];\n  }\n};","map":{"version":3,"sources":["/Users/katherinemartinez/src/designSystem/src/library/hooks/useBackground.ts"],"names":["useTheme","useBackground","surface","color","colors"],"mappings":"AAAA,SAASA,QAAT,QAAyB,qBAAzB;AAGA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAI3BC,OAJ2B,EAK3BC,KAL2B,EAMxB;AAAA,kBACgBH,QAAQ,EADxB;AAAA,MACKI,MADL,aACKA,MADL;;AAGH,MAAIF,OAAO,IAAIE,MAAX,IAAqBD,KAAK,IAAIC,MAAM,CAACF,OAAD,CAAxC,EAAmD;AACjD,WAAOE,MAAM,CAACF,OAAD,CAAN,CAAgBC,KAAhB,CAAP;AACD;AACF,CAZM","sourcesContent":["import { useTheme } from '@designSystem/theme';\nimport { SurfaceModifier, Theme } from '@designSystem/types';\n\nexport const useBackground = <\n  T extends SurfaceModifier,\n  C extends keyof Theme['colors'][T]\n>(\n  surface: T,\n  color: C,\n) => {\n  const { colors } = useTheme();\n\n  if (surface in colors && color in colors[surface]) {\n    return colors[surface][color];\n  }\n};\n"]},"metadata":{},"sourceType":"module"}